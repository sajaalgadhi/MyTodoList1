{"version":3,"sources":["todo.js","quotes.js","App.js","serviceWorker.js","index.js"],"names":["Todo","state","hide","finishtask","_this","setState","_this2","this","react_default","a","createElement","onClick","className","props","TaskData","title","type","name","removeTask","index","role","aria-label","Component","Quotes","id","qoute","quoteAuther","App","newtask","tasks","quote","qouteAuthr","submitfunction","event","preventDefault","copy","slice","push","Formfunction","newData","target","value","originState","Object","assign","copytasks","splice","axios","then","response","console","log","data","quoteText","quoteAuthor","catch","error","_this3","TaskList","map","todo","onSubmit","placeholder","size","onChange","quotes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c0ad25d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Todo extends Component {\n\n    state = {\n        hide: 'false'\n    }\n    //hide the task when user click on the task typed \n    finishtask = () => {\n        if (this.state.hide === 'false') {\n            this.setState({ hide: 'hidden' })\n        } else {\n            this.setState({ hide: 'false' })\n        }\n    }\n    // test = (event) => {\n    //     let index = event.target.vlue\n    //     this.props.removeTask(index)\n    //     console.log(event.target.value)\n    // }\n\n    render() {\n        return (\n            <li onClick={this.finishtask} className={this.state.hide}>{this.props.TaskData.title} üñå\n                <button className=\"b\"\n                    type='Remove'\n                    name=\"removeTask\"\n                    onClick={() => this.props.removeTask(this.props.index)}>\n                    <span role=\"img\" aria-label=\"emoji\">‚ùå</span>\n                </button>\n            </li>\n        );\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nclass Quotes extends Component {\n    render() {\n\n\n\n        return (\n            <div id='quote'>\n\n                <p>‚Äú{this.props.qoute}‚Äù</p>\n\n                <p>{this.props.quoteAuther}</p>\n\n            </div>\n\n\n        );\n    }\n\n\n} export default Quotes","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './todo';\nimport axios from 'axios';\nimport Quotes from './quotes';\n\nclass App extends Component {\n  state = {\n    newtask: {\n      title: ''\n    },\n    tasks: []\n    , quote: ''\n    , qouteAuthr: ''\n  }\n  //this function will submit user input \n  submitfunction = (event) => {\n    event.preventDefault();//prevent auto reload of the page \n    const copy = this.state.tasks.slice(0);//make copy of the tasks array \n    copy.push(this.state.newtask);//push  the new input to the array \n    this.setState({//update the copy with the new data of the array \n      tasks: copy,\n      newtask: {\n        title: ''\n      }\n    })\n\n  }\n  //this function will get the data user typed \n  Formfunction = (event) => {\n    //get data from the user \n    const newData = event.target.value;\n    //get the original state\n    const originState = this.state.newtask;\n    //assign new data to the copy of the tasks array \n    var copy = Object.assign({}, originState);\n    //add new data from user to the copy \n    const key = event.target.name;\n\n    copy[key] = newData;\n    //update the copy with the new data that user typed \n    this.setState({\n      newtask: copy\n    })\n\n\n  }\n  componentDidMount() {\n\n    //add API quotes to the page \n    axios('https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en')\n      .then((response) => {\n        console.log(response.data.quoteText)\n        console.log(response.data.quoteAuthor)\n        this.setState({\n          quote: response.data.quoteText,\n          qouteAuthr: response.data.quoteAuthor,\n\n\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n\n      })\n\n  }\n  //this function will remove each task indivisually by click button \n  removeTask = (index) => {\n    //take a copy of the array and delete array content depends on index \n    const copytasks = this.state.tasks.splice(index, 1);\n    //updat state\n    this.setState({\n      newtask: copytasks\n    })\n  }\n  // clearTasks = () => {\n  //   const copytasks = this.state.tasks.splice(0);\n  //   //updat state\n  //   this.setState({\n  //     newtask: copytasks\n  //   })\n  // }\n\n\n\n\n\n\n  render() {\n    //loop throug the tasks array \n    const TaskList = this.state.tasks.map((TaskData, index) => {\n      return <Todo TaskData={TaskData} index={index} removeTask={this.removeTask} />\n    });\n    console.log(this.state.qouteAuthr)\n    // const divStyle = {\n    //   backgroundImage: `url(${this.state.wallpaper})`,\n    // }style={divStyle}\n    return (\n      <div className='one'>\n\n        <h1>My Todo List</h1>\n\n        <form onSubmit={this.submitfunction} >\n\n          <input placeholder='what is your plan for today?' id='star' type='text' name='title' size='50' onChange={this.Formfunction} value={this.state.newtask.title} />\n          <input className=\"mybutton\" type='submit' value='New Task' />\n          \\\n        </form>\n\n        <div className='two'>\n          <ul >\n            {TaskList}\n          </ul>\n\n          <Quotes qoute={this.state.quote} quoteAuther={this.state.qouteAuthr} />\n        </div>\n        <footer>Made with <span role=\"img\" aria-label=\"emoji\">‚ô•Ô∏è </span>By:Saja AlGadhi</footer>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}